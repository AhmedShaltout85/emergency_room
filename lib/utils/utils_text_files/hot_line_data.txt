
Posting a List to Spring Boot API using Dio in Flutter
Here's a complete guide to post a list of objects from Flutter to a Spring Boot API using Dio:

1. Spring Boot API Setup (Backend)
First, ensure your Spring Boot controller is properly set up to receive a list:

java
Copy
@RestController
@RequestMapping("/api/case-reports")
public class CaseReportController {

    @PostMapping
    public ResponseEntity<List<CaseReport>> createCaseReports(@RequestBody List<CaseReport> caseReports) {
        // Process and save the list of case reports
        List<CaseReport> savedReports = caseReportService.saveAll(caseReports);
        return ResponseEntity.ok(savedReports);
    }
}
2. Flutter Implementation (Frontend)
Add Dio dependency to pubspec.yaml:
yaml
Copy
dependencies:
  dio: ^5.3.2
Create a model class in Flutter:
dart
Copy
class CaseReport {
  final int? id;
  final String caseReportDateTime;
  final String waterStopingDateTime;
  final String? caseRepairDateTime;
  final String? waterOpeningDateTime;
  final String notes;
  final bool finalClosed;
  // Include all other fields...

  CaseReport({
    this.id,
    required this.caseReportDateTime,
    required this.waterStopingDateTime,
    this.caseRepairDateTime,
    this.waterOpeningDateTime,
    required this.notes,
    required this.finalClosed,
    // Initialize all other fields...
  });

  factory CaseReport.fromJson(Map<String, dynamic> json) {
    return CaseReport(
      id: json['id'],
      caseReportDateTime: json['caseReportDateTime'],
      waterStopingDateTime: json['waterStopingDateTime'],
      caseRepairDateTime: json['caseRepairDateTime'],
      waterOpeningDateTime: json['waterOpeningDateTime'],
      notes: json['notes'],
      finalClosed: json['finalClosed'],
      // Map all other fields...
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'caseReportDateTime': caseReportDateTime,
      'waterStopingDateTime': waterStopingDateTime,
      'caseRepairDateTime': caseRepairDateTime,
      'waterOpeningDateTime': waterOpeningDateTime,
      'notes': notes,
      'finalClosed': finalClosed,
      // Include all other fields...
    };
  }
}
Create an API service class:
dart
Copy
import 'package:dio/dio.dart';

class ApiService {
  final Dio _dio = Dio(BaseOptions(
    baseUrl: 'http://your-springboot-api-url:8080/api',
    connectTimeout: const Duration(seconds: 30),
    receiveTimeout: const Duration(seconds: 30),
  ));

  Future<List<CaseReport>> postCaseReports(List<CaseReport> reports) async {
    try {
      // Convert list of objects to list of maps
      final reportsJson = reports.map((report) => report.toJson()).toList();

      final response = await _dio.post(
        '/case-reports',
        data: reportsJson,
        options: Options(
          headers: {
            'Content-Type': 'application/json',
            // Add authorization if needed
            // 'Authorization': 'Bearer $token',
          },
        ),
      );

      if (response.statusCode == 200) {
        // Parse the response if needed
        return (response.data as List)
            .map((item) => CaseReport.fromJson(item))
            .toList();
      } else {
        throw Exception('Failed to post data: ${response.statusCode}');
      }
    } on DioException catch (e) {
      if (e.response != null) {
        throw Exception('Server error: ${e.response?.statusCode} - ${e.response?.data}');
      } else {
        throw Exception('Network error: ${e.message}');
      }
    } catch (e) {
      throw Exception('Error: $e');
    }
  }
}
Usage Example:
dart
Copy
void postCaseReports() async {
  final apiService = ApiService();
  
  final reports = [
    CaseReport(
      id: 395923,
      caseReportDateTime: "2025-04-08T14:03:02.76",
      waterStopingDateTime: "2025-04-08T13:59:29.317",
      caseRepairDateTime: null,
      waterOpeningDateTime: null,
      notes: "12 بوصة 2 بلف ا/ احمد عيسى",
      finalClosed: false,
      // Set all other fields...
    ),
    // Add more reports if needed
  ];

  try {
    final result = await apiService.postCaseReports(reports);
    print('Successfully posted ${result.length} reports');
  } catch (e) {
    print('Error posting reports: $e');
  }
}
Key Considerations:
CORS Configuration (Spring Boot):
Ensure your Spring Boot API has CORS configured:

java
Copy
@Configuration
public class CorsConfig implements WebMvcConfigurer {
    @Override
    public void addCorsMappings(CorsRegistry registry) {
        registry.addMapping("/**")
                .allowedOrigins("*")
                .allowedMethods("GET", "POST", "PUT", "DELETE")
                .allowedHeaders("*");
    }
}
Date Format Handling:

Ensure date formats match between Flutter and Spring Boot

Consider using ISO 8601 format (which you're already using)

Null Values:

Spring Boot will handle null values by default

Ensure your entity class has proper @Column(nullable = true) annotations

Large Lists:

For large lists, consider implementing pagination or batch processing

Authentication:

If your API requires JWT authentication, add the token to headers:

dart
Copy
options: Options(
  headers: {
    'Content-Type': 'application/json',
    'Authorization': 'Bearer $token',
  },
),
Would you like me to modify any specific part of this implementation to better match your Spring Boot API's requirements?