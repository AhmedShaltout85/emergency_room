âœ“ Built build/app/outputs/flutter-apk/app-debug.apk
Connecting to VM Service at ws://127.0.0.1:46359/ZRks_oRq-i4=/ws
Connected to the VM Service.
I/flutter ( 6022): Grinfel, Bab Sharqi WA Wabour Al Meyah, Bab Sharqi, Alexandria Governorate 5422001
I/zzcc    ( 6022): Making Creator dynamically
I/DynamiteModule( 6022): Considering local module com.google.android.gms.maps_core_dynamite:0 and remote module com.google.android.gms.maps_core_dynamite:243125304
I/DynamiteModule( 6022): Selected remote version of com.google.android.gms.maps_core_dynamite, version >= 243125304
W/ResourceType( 6022): ResTable_typeSpec entry count inconsistent: given 94, previously 97
W/ResourceType( 6022): ResTable_typeSpec entry count inconsistent: given 94, previously 97
W/ResourceType( 6022): ResTable_typeSpec entry count inconsistent: given 3053, previously 3073
W/ResourceType( 6022): ResTable_typeSpec entry count inconsistent: given 489, previously 4762
I/native  ( 6022): I0000 00:00:1728822793.282610    6022 jni_init.cc:30] Initializing JNI...
I/Google Android Maps SDK( 6022): Google Play services client version: 18020000
I/System.out( 6022): [/system/bin/getprop, debug.mapview.logs]
I/System.out( 6022): null
I/System.out( 6022): null
I/System.out( 6022): Calling by::className:com.google.maps.api.android.lib6.common.v  MethodName:d
I/Google Android Maps SDK( 6022): Google Play services package version: 243934004
I/Google Android Maps SDK( 6022): Google Play services maps renderer version(maps_core): 243125304
E/HW-JPEG-DEC( 6022): [HME_JPEG_DEC_Delete](3321): HME_JPEG_DEC_Delete: decoder_ctx=null
E/HW-JPEG-DEC( 6022): [HME_JPEG_DEC_Delete](3321): HME_JPEG_DEC_Delete: decoder_ctx=null
E/HW-JPEG-DEC( 6022): [HME_JPEG_DEC_Delete](3321): HME_JPEG_DEC_Delete: decoder_ctx=null
E/HW-JPEG-DEC( 6022): [HME_JPEG_DEC_Delete](3321): HME_JPEG_DEC_Delete: decoder_ctx=null
E/HW-JPEG-DEC( 6022): [HME_JPEG_DEC_Delete](3321): HME_JPEG_DEC_Delete: decoder_ctx=null
E/HW-JPEG-DEC( 6022): [HME_JPEG_DEC_Delete](3321): HME_JPEG_DEC_Delete: decoder_ctx=null
E/HW-JPEG-DEC( 6022): [HME_JPEG_DEC_Delete](3321): HME_JPEG_DEC_Delete: decoder_ctx=null
E/HW-JPEG-DEC( 6022): [HME_JPEG_DEC_Delete](3321): HME_JPEG_DEC_Delete: decoder_ctx=null
E/HW-JPEG-DEC( 6022): [HME_JPEG_DEC_Delete](3321): HME_JPEG_DEC_Delete: decoder_ctx=null
E/HW-JPEG-DEC( 6022): [HME_JPEG_DEC_Delete](3321): HME_JPEG_DEC_Delete: decoder_ctx=null
E/HW-JPEG-DEC( 6022): [HME_JPEG_DEC_Delete](3321): HME_JPEG_DEC_Delete: decoder_ctx=null
E/HW-JPEG-DEC( 6022): [HME_JPEG_DEC_Delete](3321): HME_JPEG_DEC_Delete: decoder_ctx=null
E/HW-JPEG-DEC( 6022): [HME_JPEG_DEC_Delete](3321): HME_JPEG_DEC_Delete: decoder_ctx=null
E/HW-JPEG-DEC( 6022): [HME_JPEG_DEC_Delete](3321): HME_JPEG_DEC_Delete: decoder_ctx=null
E/HW-JPEG-DEC( 6022): [HME_JPEG_DEC_Delete](3321): HME_JPEG_DEC_Delete: decoder_ctx=null
I/flutter ( 6022): DioException [connection error]: The connection errored: Connection refused This indicates an error which most likely cannot be solved by the library.
I/flutter ( 6022): Error: SocketException: Connection refused (OS Error: Connection refused, errno = 111), address = localhost, port = 37436
W/ProxyAndroidLoggerBackend( 6022): Too many Flogger logs received before configuration. Dropping old logs.
W/ProxyAndroidLoggerBackend( 6022): Too many Flogger logs received before configuration. Dropping old logs.
W/ProxyAndroidLoggerBackend( 6022): Too many Flogger logs received before configuration. Dropping old logs.
W/ProxyAndroidLoggerBackend( 6022): Too many Flogger logs received before configuration. Dropping old logs.
W/ProxyAndroidLoggerBackend( 6022): Too many Flogger logs received before configuration. Dropping old logs.
W/ProxyAndroidLoggerBackend( 6022): Too many Flogger logs received before configuration. Dropping old logs.
W/ProxyAndroidLoggerBackend( 6022): Too many Flogger logs received before configuration. Dropping old logs.
W/ProxyAndroidLoggerBackend( 6022): Too many Flogger logs received before configuration. Dropping old logs.
W/ProxyAndroidLoggerBackend( 6022): Too many Flogger logs received before configuration. Dropping old logs.
W/ProxyAndroidLoggerBackend( 6022): Too many Flogger logs received before configuration. Dropping old logs.
W/ProxyAndroidLoggerBackend( 6022): Too many Flogger logs received before configuration. Dropping old logs.
W/ProxyAndroidLoggerBackend( 6022): Too many Flogger logs received before configuration. Dropping old logs.
W/ProxyAndroidLoggerBackend( 6022): Too many Flogger logs received before configuration. Dropping old logs.
E/HW-JPEG-DEC( 6022): [HME_JPEG_DEC_Delete](3321): HME_JPEG_DEC_Delete: decoder_ctx=null
I/PlatformViewsController( 6022): Hosting view in view hierarchy for platform view: 0
I/PlatformViewsController( 6022): PlatformView is using SurfaceTexture backend
W/ProxyAndroidLoggerBackend( 6022): Too many Flogger logs received before configuration. Dropping old logs.
W/ProxyAndroidLoggerBackend( 6022): Too many Flogger logs received before configuration. Dropping old logs.
W/ProxyAndroidLoggerBackend( 6022): Too many Flogger logs received before configuration. Dropping old logs.
W/ProxyAndroidLoggerBackend( 6022): Too many Flogger logs received before configuration. Dropping old logs.
W/ProxyAndroidLoggerBackend( 6022): Too many Flogger logs received before configuration. Dropping old logs.
W/ProxyAndroidLoggerBackend( 6022): Too many Flogger logs received before configuration. Dropping old logs.
W/ProxyAndroidLoggerBackend( 6022): Too many Flogger logs received before configuration. Dropping old logs.
I/Choreographer( 6022): Skipped 84 frames!  The application may be doing too much work on its main thread.
W/ProxyAndroidLoggerBackend( 6022): Too many Flogger logs received before configuration. Dropping old logs.
W/ProxyAndroidLoggerBackend( 6022): Too many Flogger logs received before configuration. Dropping old logs.
W/ProxyAndroidLoggerBackend( 6022): Too many Flogger logs received before configuration. Dropping old logs.
W/ProxyAndroidLoggerBackend( 6022): Too many Flogger logs received before configuration. Dropping old logs.
W/ProxyAndroidLoggerBackend( 6022): Too many Flogger logs received before configuration. Dropping old logs.
W/ProxyAndroidLoggerBackend( 6022): Too many Flogger logs received before configuration. Dropping old logs.
W/ProxyAndroidLoggerBackend( 6022): Too many Flogger logs received before configuration. Dropping old logs.
W/ProxyAndroidLoggerBackend( 6022): Too many Flogger logs received before configuration. Dropping old logs.
I/GoogleMapController( 6022): Installing custom TextureView driven invalidator.
E/GoogleMapController( 6022): Cannot enable MyLocation layer as location permissions are not granted
W/ProxyAndroidLoggerBackend( 6022): Too many Flogger logs received before configuration. Dropping old logs.
W/ProxyAndroidLoggerBackend( 6022): Too many Flogger logs received before configuration. Dropping old logs.
I/art     ( 6022): Background sticky concurrent mark sweep GC freed 23514(1671KB) AllocSpace objects, 3(120KB) LOS objects, 0% free, 15MB/16MB, paused 4.728ms total 118.408ms
E/HW-JPEG-DEC( 6022): [HME_JPEG_DEC_Delete](3321): HME_JPEG_DEC_Delete: decoder_ctx=null
E/HW-JPEG-DEC( 6022): [HME_JPEG_DEC_Delete](3321): HME_JPEG_DEC_Delete: decoder_ctx=null
I/art     ( 6022): Background partial concurrent mark sweep GC freed 67185(2MB) AllocSpace objects, 9(396KB) LOS objects, 18% free, 17MB/21MB, paused 3.435ms total 147.211ms
W/ProxyAndroidLoggerBackend( 6022): Too many Flogger logs received before configuration. Dropping old logs.
W/ProxyAndroidLoggerBackend( 6022): Too many Flogger logs received before configuration. Dropping old logs.
W/ProxyAndroidLoggerBackend( 6022): Too many Flogger logs received before configuration. Dropping old logs.
W/ProxyAndroidLoggerBackend( 6022): Too many Flogger logs received before configuration. Dropping old logs.
E/HW-JPEG-DEC( 6022): [HME_JPEG_DEC_Delete](3321): HME_JPEG_DEC_Delete: decoder_ctx=null
E/HW-JPEG-DEC( 6022): [HME_JPEG_DEC_Delete](3321): HME_JPEG_DEC_Delete: decoder_ctx=null
E/HW-JPEG-DEC( 6022): [HME_JPEG_DEC_Delete](3321): HME_JPEG_DEC_Delete: decoder_ctx=null
E/HW-JPEG-DEC( 6022): [HME_JPEG_DEC_Delete](3321): HME_JPEG_DEC_Delete: decoder_ctx=null
E/HW-JPEG-DEC( 6022): [HME_JPEG_DEC_Delete](3321): HME_JPEG_DEC_Delete: decoder_ctx=null
E/HW-JPEG-DEC( 6022): [HME_JPEG_DEC_Delete](3321): HME_JPEG_DEC_Delete: decoder_ctx=null
E/HW-JPEG-DEC( 6022): [HME_JPEG_DEC_Delete](3321): HME_JPEG_DEC_Delete: decoder_ctx=null
E/HW-JPEG-DEC( 6022): [HME_JPEG_DEC_Delete](3321): HME_JPEG_DEC_Delete: decoder_ctx=null
E/HW-JPEG-DEC( 6022): [HME_JPEG_DEC_Delete](3321): HME_JPEG_DEC_Delete: decoder_ctx=null
E/HW-JPEG-DEC( 6022): [HME_JPEG_DEC_Delete](3321): HME_JPEG_DEC_Delete: decoder_ctx=null
E/HW-JPEG-DEC( 6022): [HME_JPEG_DEC_Delete](3321): HME_JPEG_DEC_Delete: decoder_ctx=null
W/ProxyAndroidLoggerBackend( 6022): Too many Flogger logs received before configuration. Dropping old logs.
W/ProxyAndroidLoggerBackend( 6022): Too many Flogger logs received before configuration. Dropping old logs.
E/HW-JPEG-DEC( 6022): [HME_JPEG_DEC_Delete](3321): HME_JPEG_DEC_Delete: decoder_ctx=null
W/ProxyAndroidLoggerBackend( 6022): Too many Flogger logs received before configuration. Dropping old logs.
W/ProxyAndroidLoggerBackend( 6022): Too many Flogger logs received before configuration. Dropping old logs.
W/ProxyAndroidLoggerBackend( 6022): Too many Flogger logs received before configuration. Dropping old logs.
W/ProxyAndroidLoggerBackend( 6022): Too many Flogger logs received before configuration. Dropping old logs.
E/HW-JPEG-DEC( 6022): [HME_JPEG_DEC_Delete](3321): HME_JPEG_DEC_Delete: decoder_ctx=null
E/HW-JPEG-DEC( 6022): [HME_JPEG_DEC_Delete](3321): HME_JPEG_DEC_Delete: decoder_ctx=null
W/ProxyAndroidLoggerBackend( 6022): Too many Flogger logs received before configuration. Dropping old logs.
W/ProxyAndroidLoggerBackend( 6022): Too many Flogger logs received before configuration. Dropping old logs.
E/HW-JPEG-DEC( 6022): [HME_JPEG_DEC_Delete](3321): HME_JPEG_DEC_Delete: decoder_ctx=null
W/ProxyAndroidLoggerBackend( 6022): Too many Flogger logs received before configuration. Dropping old logs.
W/ProxyAndroidLoggerBackend( 6022): Too many Flogger logs received before configuration. Dropping old logs.
W/ProxyAndroidLoggerBackend( 6022): Too many Flogger logs received before configuration. Dropping old logs.
W/ProxyAndroidLoggerBackend( 6022): Too many Flogger logs received before configuration. Dropping old logs.
W/ProxyAndroidLoggerBackend( 6022): Too many Flogger logs received before configuration. Dropping old logs.
W/ProxyAndroidLoggerBackend( 6022): Too many Flogger logs received before configuration. Dropping old logs.
W/ProxyAndroidLoggerBackend( 6022): Too many Flogger logs received before configuration. Dropping old logs.
W/ProxyAndroidLoggerBackend( 6022): Too many Flogger logs received before configuration. Dropping old logs.
W/ProxyAndroidLoggerBackend( 6022): Too many Flogger logs received before configuration. Dropping old logs.
E/HW-JPEG-DEC( 6022): [HME_JPEG_DEC_Delete](3321): HME_JPEG_DEC_Delete: decoder_ctx=null
E/HW-JPEG-DEC( 6022): [HME_JPEG_DEC_Delete](3321): HME_JPEG_DEC_Delete: decoder_ctx=null
W/ProxyAndroidLoggerBackend( 6022): Too many Flogger logs received before configuration. Dropping old logs.
E/HW-JPEG-DEC( 6022): [HME_JPEG_DEC_Delete](3321): HME_JPEG_DEC_Delete: decoder_ctx=null
E/HW-JPEG-DEC( 6022): [HME_JPEG_DEC_Delete](3321): HME_JPEG_DEC_Delete: decoder_ctx=null
I/art     ( 6022): Background partial concurrent mark sweep GC freed 57133(2MB) AllocSpace objects, 51(3MB) LOS objects, 15% free, 21MB/25MB, paused 3.263ms total 108.606ms
E/HW-JPEG-DEC( 6022): [HME_JPEG_DEC_Delete](3321): HME_JPEG_DEC_Delete: decoder_ctx=null
W/ProxyAndroidLoggerBackend( 6022): Too many Flogger logs received before configuration. Dropping old logs.
E/HW-JPEG-DEC( 6022): [HME_JPEG_DEC_Delete](3321): HME_JPEG_DEC_Delete: decoder_ctx=null
E/HW-JPEG-DEC( 6022): [HME_JPEG_DEC_Delete](3321): HME_JPEG_DEC_Delete: decoder_ctx=null
W/JavaCronetEngine( 6022): using the fallback Cronet Engine implementation. Performance will suffer and many HTTP client features, including caching, will not work.
E/HW-JPEG-DEC( 6022): [HME_JPEG_DEC_Delete](3321): HME_JPEG_DEC_Delete: decoder_ctx=null
E/HW-JPEG-DEC( 6022): [HME_JPEG_DEC_Delete](3321): HME_JPEG_DEC_Delete: decoder_ctx=null
W/ProxyAndroidLoggerBackend( 6022): Too many Flogger logs received before configuration. Dropping old logs.
W/ProxyAndroidLoggerBackend( 6022): Too many Flogger logs received before configuration. Dropping old logs.
W/ProxyAndroidLoggerBackend( 6022): Too many Flogger logs received before configuration. Dropping old logs.
E/HW-JPEG-DEC( 6022): [HME_JPEG_DEC_Delete](3321): HME_JPEG_DEC_Delete: decoder_ctx=null
E/HW-JPEG-DEC( 6022): [HME_JPEG_DEC_Delete](3321): HME_JPEG_DEC_Delete: decoder_ctx=null
W/art     ( 6022): Before Android 4.1, method double java.util.concurrent.ThreadLocalRandom.internalNextDouble(double, double) would have incorrectly overridden the package-private method in java.util.Random
W/art     ( 6022): Before Android 4.1, method int java.util.concurrent.ThreadLocalRandom.internalNextInt(int, int) would have incorrectly overridden the package-private method in java.util.Random
W/art     ( 6022): Before Android 4.1, method long java.util.concurrent.ThreadLocalRandom.internalNextLong(long, long) would have incorrectly overridden the package-private method in java.util.Random
W/ProxyAndroidLoggerBackend( 6022): Too many Flogger logs received before configuration. Dropping old logs.
W/DynamiteModule( 6022): Local module descriptor class for com.google.android.gms.googlecertificates not found.
I/DynamiteModule( 6022): Considering local module com.google.android.gms.googlecertificates:0 and remote module com.google.android.gms.googlecertificates:7
I/DynamiteModule( 6022): Selected remote version of com.google.android.gms.googlecertificates, version >= 7
W/System  ( 6022): ClassLoader referenced unknown path: /data/user_de/0/com.google.android.gms/app_chimera/m/00000005/n/arm64-v8a
W/ProxyAndroidLoggerBackend( 6022): Too many Flogger logs received before configuration. Dropping old logs.
W/ProxyAndroidLoggerBackend( 6022): Too many Flogger logs received before configuration. Dropping old logs.



The error message you are seeing indicates that the Google Maps plugin in your Flutter app is trying to enable the "MyLocation" layer (which shows the user's current location on the map), but location permissions have not been granted.

To resolve this, you need to request location permissions from the user and check whether they have been granted before enabling the MyLocation layer in Google Maps.

Hereâ€™s a step-by-step guide to fix this issue:

1. Request Location Permissions
You need to use a permissions plugin, such as permission_handler, to request location permissions.

Add the following dependency in your pubspec.yaml:

yaml
Copy code
dependencies:
  flutter:
    sdk: flutter
  google_maps_flutter: ^latest_version
  permission_handler: ^latest_version
Then, run flutter pub get to install the dependencies.

2. Modify the Code to Request Permissions
You should request location permissions before trying to enable the MyLocation layer. Hereâ€™s an example of how to do this in Flutter:

dart
Copy code
import 'package:flutter/material.dart';
import 'package:google_maps_flutter/google_maps_flutter.dart';
import 'package:permission_handler/permission_handler.dart';

class MyHomePageState extends State<MyHomePage> {
  late GoogleMapController _mapController;
  bool _locationPermissionGranted = false;

  @override
  void initState() {
    super.initState();
    
    // Request location permissions
    _requestLocationPermission();
  }

  Future<void> _requestLocationPermission() async {
    PermissionStatus status = await Permission.location.request();
    if (status.isGranted) {
      setState(() {
        _locationPermissionGranted = true;
      });
    } else {
      // Handle permission denied
      print("Location permission denied");
    }
  }

  void _onMapCreated(GoogleMapController controller) {
    _mapController = controller;
    if (_locationPermissionGranted) {
      // Enable MyLocation layer if permission is granted
      _mapController.setMyLocationEnabled(true);
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Google Maps with Location Permission'),
      ),
      body: GoogleMap(
        onMapCreated: _onMapCreated,
        initialCameraPosition: CameraPosition(
          target: LatLng(37.77483, -122.41942), // Example coordinates (San Francisco)
          zoom: 12,
        ),
        myLocationEnabled: _locationPermissionGranted, // Enable MyLocation layer
      ),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  MyHomePageState createState() => MyHomePageState();
}
Key Changes:
Requesting Location Permissions:

The _requestLocationPermission method is used to request location permissions using the permission_handler plugin. If granted, it sets the _locationPermissionGranted flag to true.
Enabling MyLocation Layer:

The onMapCreated callback sets up the GoogleMapController. If the location permission is granted, the MyLocation layer is enabled using _mapController.setMyLocationEnabled(true).
Handling Permission Denial:

If the user denies the location permission, handle it gracefully. In this case, the MyLocation layer will not be enabled.
3. Add Permissions in Android Manifest
You also need to declare the location permission in the Android manifest.

Open android/app/src/main/AndroidManifest.xml and add the following permissions inside the <manifest> tag:

xml
Copy code
<uses-permission android:name="android.permission.ACCESS_FINE_LOCATION"/>
<uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION"/>
4. Handling Permissions in iOS (Optional)
For iOS, you need to add keys to the Info.plist file located at ios/Runner/Info.plist:

xml
Copy code
<key>NSLocationWhenInUseUsageDescription</key>
<string>This app needs access to your location to show it on the map.</string>
Now, your app will properly handle location permissions and enable the "MyLocation" layer if the user grants permission.







name: pick_location
description: "A picLocation Flutter project."
# The following line prevents the package from being accidentally published to
# pub.dev using `flutter pub publish`. This is preferred for private packages.
publish_to: 'none' # Remove this line if you wish to publish to pub.dev

# The following defines the version and build number for your application.
# A version number is three numbers separated by dots, like 1.2.43
# followed by an optional build number separated by a +.
# Both the version and the builder number may be overridden in flutter
# build by specifying --build-name and --build-number, respectively.
# In Android, build-name is used as versionName while build-number used as versionCode.
# Read more about Android versioning at https://developer.android.com/studio/publish/versioning
# In iOS, build-name is used as CFBundleShortVersionString while build-number is used as CFBundleVersion.
# Read more about iOS versioning at
# https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html
# In Windows, build-name is used as the major, minor, and patch parts
# of the product and file versions while build-number is used as the build suffix.
version: 1.0.0+1

environment:
  sdk: ^3.5.3

# Dependencies specify other packages that your package needs in order to work.
# To automatically upgrade your package dependencies to the latest versions
# consider running `flutter pub upgrade --major-versions`. Alternatively,
# dependencies can be manually updated by changing the version numbers below to
# the latest version available on pub.dev. To see which dependencies have newer
# versions available, run `flutter pub outdated`.
dependencies:
  flutter:
    sdk: flutter
  flutter_native_splash: ^2.4.4
 

  # The following adds the Cupertino Icons font to your application.
  # Use with the CupertinoIcons class for iOS style icons.
  cupertino_icons: ^1.0.8
  dio: ^5.7.0
  # geocoding: ^3.0.0
  geocoding: ^2.0.4  # Or the latest version
  http: ^1.2.2  # Or the latest version
  google_maps_flutter: ^2.2.2  # Check for the latest version
  # google_maps_flutter: ^2.9.0  # Check for the latest version
  # permission_handler: ^11.3.1
  webview_flutter: ^4.2.1
  webview_flutter_web:  # Replace with the latest version 
  # webview_all: ^0.4.5


  url_launcher: ^6.2.5

  # video_call package
  # agora_rtc_engine: ^6.0.0
  # permission_handler: ^8.3.0

  # curved_navigation_bar
  curved_navigation_bar: ^1.0.3
  # flutter native splash config
flutter_native_splash:
    color: "#42a5f5"
    image: assets/splash.png
    android_gravity: fill
    # android: true
    # ios: flase
    # web: true











dev_dependencies:
  flutter_test:
    sdk: flutter
    
#   flutter_launcher_icons:

# flutter_icons:
#   android: true
#   ios: true
#   image_path: "assets/icon/icon.png" 

  # The "flutter_lints" package below contains a set of recommended lints to
  # encourage good coding practices. The lint set provided by the package is
  # activated in the `analysis_options.yaml` file located at the root of your
  # package. See that file for information about deactivating specific lint
  # rules and activating additional ones.
  flutter_lints: ^4.0.0

# For information on the generic Dart part of this file, see the
# following page: https://dart.dev/tools/pub/pubspec

# The following section is specific to Flutter packages.
flutter:

  # The following line ensures that the Material Icons font is
  # included with your application, so that you can use the icons in
  # the material Icons class.
  uses-material-design: true

  # To add assets to your application, add an assets section, like this:
  # assets:
  #   - images/a_dot_burr.jpeg
  #   - images/a_dot_ham.jpeg

  # An image asset can refer to one or more resolution-specific "variants", see
  # https://flutter.dev/to/resolution-aware-images

  # For details regarding adding assets from package dependencies, see
  # https://flutter.dev/to/asset-from-package

  # To add custom fonts to your application, add a fonts section here,
  # in this "flutter" section. Each entry in this list should have a
  # "family" key with the font family name, and a "fonts" key with a
  # list giving the asset and other descriptors for the font. For
  # example:
  # fonts:
  #   - family: Schyler
  #     fonts:
  #       - asset: fonts/Schyler-Regular.ttf
  #       - asset: fonts/Schyler-Italic.ttf
  #         style: italic
  #   - family: Trajan Pro
  #     fonts:
  #       - asset: fonts/TrajanPro.ttf
  #       - asset: fonts/TrajanPro_Bold.ttf
  #         weight: 700
  #
  # For details regarding fonts from package dependencies,
  # see https://flutter.dev/to/font-from-package





